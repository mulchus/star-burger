version: '3.8'

services:  
  
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod      
    command: gunicorn star_burger.wsgi:application -w 3 --bind 0.0.0.0:8000 --timeout 120
      #networks:
       #nginx_net:
    volumes:
      - static_volume:/home/star-burger/web/staticfiles
      - media_volume:/home/star-burger/web/media
    expose:
      - 8000
    env_file:
      - .env.prod
    depends_on:
      - db

  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.prod.db

  nginx:
    #container_name: nginx      
    build: ./nginx
      #image: nginx
      #restart: unless-stopped
      #networks:
       #nginx_net:
    volumes:
      - static_volume:/home/star-burger/web/staticfiles  
      - media_volume:/home/star-burger/web/media
        #- ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        #- ./certbot/conf:/etc/letsencrypt
        #- ./certbot/www:/var/www/certbot
    ports:
      - 80:80
        #- 443:443  
        #command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''    
    depends_on:
      - web 

        #  certbot:
        #container_name: certbot
        #image: certbot/certbot
      #restart: unless-stopped  
      #networks:
       #nginx_net:
       #volumes:
       #- ./certbot/conf:/etc/letsencrypt
       #- ./certbot/www:/var/www/certbot
        #entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

        #networks:
        #nginx_net:
    #name: nginx_net
      # external: true

volumes:
  postgres_data:
  static_volume:  
  media_volume:  
